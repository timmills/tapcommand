╔════════════════════════════════════════════════════════════════════════╗
║                                                                        ║
║          SmartVenue Network TV Discovery - Quick Start Guide          ║
║                                                                        ║
╚════════════════════════════════════════════════════════════════════════╝

WHAT IS THIS?
=============
A standalone Python script that scans venue networks to find ALL network-
controllable TVs (Samsung, LG, Sony, Philips, Roku, Apple TV, Vizio,
Panasonic, TCL, Hisense, Sharp).

Discovers TVs via:
  ✓ MAC address vendor lookup
  ✓ Port scanning (automatic protocol detection)
  ✓ Device info gathering (model, firmware)

Outputs:
  • JSON report (for automation)
  • CSV report (for spreadsheets)


BEFORE GOING ONSITE
====================

1. Copy to USB drive:
   - venue_tv_discovery_nmap_optional.py
   - VENUE_DISCOVERY_README.md
   - This file (GETTING_STARTED_ONSITE_DISCOVERY.txt)

2. On your laptop, install dependencies:

   pip3 install requests tabulate

   sudo apt-get install nmap -y  # Optional but recommended for speed


AT THE VENUE
============

Step 1: Connect to venue network
   • Ethernet or WiFi
   • Note the subnet (e.g., 192.168.1.x, 10.0.0.x)

Step 2: Run the script

   python3 venue_tv_discovery_nmap_optional.py 192.168.1

   (Replace 192.168.1 with venue's subnet)

Step 3: Wait for scan (typically 1-2 minutes)
   • Script will show progress
   • Displays found TVs in a table
   • Creates JSON + CSV reports

Step 4: Review results
   • Console shows all discovered TVs
   • Note IPs, brands, and protocols

Step 5: Collect report files
   • tv_discovery_report_YYYYMMDD_HHMMSS.json
   • tv_discovery_report_YYYYMMDD_HHMMSS.csv


EXAMPLE USAGE
=============

# Scan default (192.168.1.0/24)
python3 venue_tv_discovery_nmap_optional.py

# Scan specific subnet
python3 venue_tv_discovery_nmap_optional.py 10.0.50

# Scan limited range (faster)
python3 venue_tv_discovery_nmap_optional.py 192.168.1 --range 1-100

# Get help
python3 venue_tv_discovery_nmap_optional.py --help


WHAT TO EXPECT
==============

Console output example:
┌──────────────────────────────────────────────────────────────┐
│ [✓] Found 45 online hosts                                    │
│ [✓] Found 18 MAC addresses                                   │
│ [✓] Found 4 potential TV devices                             │
│ [*] Detecting TV protocols (port scanning)...                │
│     Scanning 192.168.1.50 (Samsung)... ✓ Samsung Legacy      │
│     Scanning 192.168.1.52 (Samsung)... ✓ Samsung Modern      │
│     Scanning 192.168.1.100 (LG)... ✓ LG WebOS                │
│     Scanning 192.168.1.120 (Sony)... ✓ Sony IRCC             │
└──────────────────────────────────────────────────────────────┘

Table shows:
  • IP address
  • Brand
  • Model (if detectable)
  • Protocol(s)
  • Open ports
  • Hostname


SUPPORTED TV BRANDS
===================

Brand          Protocols                    Ports Scanned
─────────────────────────────────────────────────────────────────
Samsung        Legacy, Modern WebSocket     55000, 8001, 8002
LG             WebOS                        3000, 3001
Sony           IRCC HTTP                    80, 10000
Philips        JointSpace API               1925, 1926
Roku           ECP                          8060
Apple TV       (WiFi-based)                 -
Vizio          HTTP                         80, 8080
Panasonic      HTTP                         80, 8080
TCL            HTTP                         80, 8080
Hisense        HTTP                         80, 8080
Sharp          HTTP                         80, 8080


REPORT FORMAT
=============

JSON Example:
{
  "scan_time": "2025-10-04T14:40:43",
  "total_tvs_found": 4,
  "brands_found": ["Samsung", "LG", "Sony"],
  "devices": [
    {
      "ip": "192.168.1.50",
      "mac": "E4:E0:C5:B8:5A:97",
      "vendor": "Samsung",
      "model": "LA40D550",
      "protocols": ["Samsung Legacy"],
      "open_ports": [55000],
      "latency_ms": 2.3
    },
    ...
  ]
}

CSV Format: Spreadsheet-ready with columns for IP, MAC, vendor, model,
            protocols, ports, hostname, latency


TROUBLESHOOTING
===============

Problem: "Missing dependencies" error
Fix:     pip3 install requests tabulate

Problem: No TVs found
Fix:     • Check TVs are powered on
         • Verify same network as laptop
         • Try --range 1-50 for smaller scan

Problem: Script slow
Fix:     • Install nmap: sudo apt-get install nmap -y
         • Use smaller range: --range 1-100

Problem: "Permission denied"
Fix:     chmod +x venue_tv_discovery_nmap_optional.py

Problem: Only found 1 TV but venue has more
Fix:     • Other TVs might be powered off
         • Check if TVs are on different subnet
         • Some TVs may have uncommon MAC prefixes


DEPENDENCIES
============

Required (Always):
  • Python 3.8+
  • pip3 install requests tabulate

Optional (Recommended):
  • sudo apt-get install nmap -y  (2-3x faster scans)


NEXT STEPS AFTER DISCOVERY
===========================

1. Copy report files to USB/email
2. Import reports to SmartVenue admin portal
3. System creates virtual controllers automatically
4. Pair each TV (protocol-specific):
   • Samsung Legacy: Accept on TV screen
   • Samsung Modern: Accept pairing, token stored
   • LG WebOS: Enter pairing key
   • Sony: Configure PSK on TV
5. TVs ready for network control!


WHY NETWORK CONTROL?
=====================

Network Control vs IR Control:

Speed:        50-100ms vs 500-800ms (5-10x faster!)
Reliability:  99.9% vs ~90% (more reliable)
Range:        Unlimited vs 5-10m (no line-of-sight needed)
Feedback:     Yes vs No (can query TV status)
Setup:        5 min vs 30 min (faster deployment)
Cost:         $0 vs $25/TV (no hardware needed)


FILES IN PACKAGE
================

Scripts:
  ✓ venue_tv_discovery_nmap_optional.py  (Main script - USE THIS)
  • venue_tv_discovery.py                (Requires nmap)

Documentation:
  ✓ VENUE_DISCOVERY_README.md            (Full comprehensive guide)
  ✓ GETTING_STARTED_ONSITE_DISCOVERY.txt (This file)
  • DISCOVERY_SCRIPT_DEPENDENCIES.txt    (Quick reference)
  • ONSITE_DISCOVERY_SUMMARY.md          (Test results)
  • README_NETWORK_DISCOVERY.md          (Overview)


FOR MORE HELP
=============

• Read VENUE_DISCOVERY_README.md for detailed guide
• Check DISCOVERY_SCRIPT_DEPENDENCIES.txt for quick reference
• Review ONSITE_DISCOVERY_SUMMARY.md for test results


STATUS
======

✓ Script tested and working (October 4, 2025)
✓ Found 1 Samsung TV on test network (192.168.101.0/24)
✓ Protocol detection working (Samsung Legacy, port 55000)
✓ JSON/CSV reports generated successfully
✓ Ready for onsite deployment


CONTACT
=======

For issues or questions, refer to documentation files included in package.


═══════════════════════════════════════════════════════════════════════

Good luck with your venue survey! 🎯

═══════════════════════════════════════════════════════════════════════
