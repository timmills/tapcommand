# ================================================================
# FULL OPTIMIZED YAML - Array-Based Lookup for All Commands
# 88% reduction in dispatch_digit size
# ================================================================

substitutions:
  device_name: ir-dcf89f
  friendly_name: IR DCF89F
  wifi_ssid: "TV"
  wifi_password: "rdL1R7iDpXDx4O"
  wifi_hidden: "true"
  api_key: "uuPgF8JOAV/ZhFbDV4iS4Kwr1MV5H97p6Nk+HnpE1+g="
  ota_password: "changeme"

esphome:
  name: "${device_name}"
  friendly_name: "${friendly_name}"

esp8266:
  board: d1_mini

logger:

api:
  encryption:
    key: "${api_key}"
  services:
    - service: diagnostic_signal
      variables:
        port: int
        code: int
      then:
        - lambda: |-
            ESP_LOGI("diagnostic", "Received diagnostic signal - Port: %d, Code: %d", port, code);
            if (port == 0 && code == 1) {
              id(diagnostic_alert_start).execute();
            }

wifi:
  networks:
    - ssid: "${wifi_ssid}"
      password: "${wifi_password}"
      hidden: ${wifi_hidden}

ota:
  - platform: esphome
    password: "${ota_password}"

web_server:
  port: 80

captive_portal:

# Diagnostic LED
output:
  - platform: gpio
    id: diagnostic_led
    pin: GPIO2
    inverted: true

light:
  - platform: binary
    id: status_led
    name: "Diagnostic LED"
    output: diagnostic_led

# IR Capabilities sensor
text_sensor:
  - platform: template
    name: "IR Capabilities"
    id: ir_capabilities
    update_interval: never
    lambda: |-
      return std::string("{\"ports\":[{\"port\":1,\"protocol\":\"samsung\"},{\"port\":2,\"protocol\":\"panasonic\"},{\"port\":3,\"protocol\":\"lg\"},{\"port\":4,\"protocol\":\"sony\"}]}");

# Test buttons for each port
button:
  - platform: template
    name: "Port 1 Power"
    on_press:
      - script.execute: power_port1

  - platform: template
    name: "Port 2 Power"
    on_press:
      - script.execute: power_port2

  - platform: template
    name: "Port 3 Power"
    on_press:
      - script.execute: power_port3

  - platform: template
    name: "Port 4 Power"
    on_press:
      - script.execute: power_port4

remote_transmitter:
  - id: ir_transmitter_port1
    pin: GPIO13
    carrier_duty_percent: 50%
  - id: ir_transmitter_port2
    pin: GPIO15
    carrier_duty_percent: 50%
  - id: ir_transmitter_port3
    pin: GPIO12
    carrier_duty_percent: 50%
  - id: ir_transmitter_port4
    pin: GPIO16
    carrier_duty_percent: 50%

# ================================================================
# SUPER OPTIMIZED dispatch_digit - Array-Based Lookup
# ================================================================
script:
  # Diagnostic LED flash sequence
  - id: diagnostic_alert_start
    then:
      - light.turn_on: status_led
      - delay: 200ms
      - light.turn_off: status_led
      - delay: 200ms
      - light.turn_on: status_led
      - delay: 200ms
      - light.turn_off: status_led

  - id: dispatch_digit
    parameters:
      target_port: int
      digit: int
    then:
      - lambda: |-
          // Port 1 - Samsung
          static const uint32_t port1_digits[] = {
            0xE0E08877, 0xE0E020DF, 0xE0E0A05F, 0xE0E0609F, 0xE0E010EF,
            0xE0E0906F, 0xE0E050AF, 0xE0E030CF, 0xE0E0B04F, 0xE0E0708F
          };

          // Port 2 - Panasonic
          static const uint32_t port2_commands[] = {
            0x01009899, 0x01000809, 0x01008889, 0x01004849, 0x0100C8C9,
            0x01002829, 0x0100A8A9, 0x01006869, 0x0100E8E9, 0x01001819
          };
          static const uint32_t port2_address = 0x4004;

          // Port 3 - LG
          static const uint32_t port3_digits[] = {
            0x20DF08F7, 0x20DF8877, 0x20DF48B7, 0x20DFC837, 0x20DF28D7,
            0x20DFA857, 0x20DF6897, 0x20DFE817, 0x20DF18E7, 0x20DF9867
          };
          static const uint8_t port3_nbits = 32;

          // Port 4 - Sony
          static const uint32_t port4_digits[] = {
            0x0090, 0x0010, 0x0810, 0x0410, 0x0C10,
            0x0210, 0x0A10, 0x0610, 0x0E10, 0x0110
          };
          static const uint8_t port4_nbits = 12;

          // Validation
          if (digit < 0 || digit > 9) {
            ESP_LOGW("dispatch", "Invalid digit: %d", digit);
            return;
          }

          // Port routing with array lookup
          if (target_port == 1) {
            auto call = id(ir_transmitter_port1).transmit();
            esphome::remote_base::SamsungData data;
            data.data = port1_digits[digit];
            esphome::remote_base::SamsungProtocol().encode(call.get_data(), data);
            call.perform();
          } else if (target_port == 2) {
            auto call = id(ir_transmitter_port2).transmit();
            esphome::remote_base::PanasonicData data;
            data.address = port2_address;
            data.command = port2_commands[digit];
            esphome::remote_base::PanasonicProtocol().encode(call.get_data(), data);
            call.perform();
          } else if (target_port == 3) {
            auto call = id(ir_transmitter_port3).transmit();
            esphome::remote_base::LGData data;
            data.data = port3_digits[digit];
            data.nbits = port3_nbits;
            esphome::remote_base::LGProtocol().encode(call.get_data(), data);
            call.perform();
          } else if (target_port == 4) {
            auto call = id(ir_transmitter_port4).transmit();
            esphome::remote_base::SonyData data;
            data.data = port4_digits[digit];
            data.nbits = port4_nbits;
            esphome::remote_base::SonyProtocol().encode(call.get_data(), data);
            call.perform();
          } else {
            ESP_LOGW("dispatch", "Invalid port: %d", target_port);
          }

  # ================================================================
  # Power Commands - Simple Direct Calls
  # ================================================================
  - id: power_port1
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port1).transmit();
          esphome::remote_base::SamsungData data;
          data.data = 0xE0E040BF;
          esphome::remote_base::SamsungProtocol().encode(call.get_data(), data);
          call.perform();

  - id: power_port2
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port2).transmit();
          esphome::remote_base::PanasonicData data;
          data.address = 0x4004;
          data.command = 0x0100BCBD;
          esphome::remote_base::PanasonicProtocol().encode(call.get_data(), data);
          call.perform();

  - id: power_port3
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port3).transmit();
          esphome::remote_base::LGData data;
          data.data = 0x20DF10EF;
          data.nbits = 32;
          esphome::remote_base::LGProtocol().encode(call.get_data(), data);
          call.perform();

  - id: power_port4
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port4).transmit();
          esphome::remote_base::SonyData data;
          data.data = 0x0A90;
          data.nbits = 12;
          esphome::remote_base::SonyProtocol().encode(call.get_data(), data);
          call.perform();

  # ================================================================
  # Mute Commands
  # ================================================================
  - id: mute_port1
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port1).transmit();
          esphome::remote_base::SamsungData data;
          data.data = 0xE0E0F00F;
          esphome::remote_base::SamsungProtocol().encode(call.get_data(), data);
          call.perform();

  - id: mute_port2
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port2).transmit();
          esphome::remote_base::PanasonicData data;
          data.address = 0x4004;
          data.command = 0x01004C4D;
          esphome::remote_base::PanasonicProtocol().encode(call.get_data(), data);
          call.perform();

  - id: mute_port3
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port3).transmit();
          esphome::remote_base::LGData data;
          data.data = 0x20DF906F;
          data.nbits = 32;
          esphome::remote_base::LGProtocol().encode(call.get_data(), data);
          call.perform();

  - id: mute_port4
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port4).transmit();
          esphome::remote_base::SonyData data;
          data.data = 0x0290;
          data.nbits = 12;
          esphome::remote_base::SonyProtocol().encode(call.get_data(), data);
          call.perform();

  # ================================================================
  # Volume Up Commands
  # ================================================================
  - id: volume_up_port1
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port1).transmit();
          esphome::remote_base::SamsungData data;
          data.data = 0xE0E0E01F;
          esphome::remote_base::SamsungProtocol().encode(call.get_data(), data);
          call.perform();

  - id: volume_up_port2
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port2).transmit();
          esphome::remote_base::PanasonicData data;
          data.address = 0x4004;
          data.command = 0x01000405;
          esphome::remote_base::PanasonicProtocol().encode(call.get_data(), data);
          call.perform();

  - id: volume_up_port3
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port3).transmit();
          esphome::remote_base::LGData data;
          data.data = 0x20DF40BF;
          data.nbits = 32;
          esphome::remote_base::LGProtocol().encode(call.get_data(), data);
          call.perform();

  - id: volume_up_port4
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port4).transmit();
          esphome::remote_base::SonyData data;
          data.data = 0x0490;
          data.nbits = 12;
          esphome::remote_base::SonyProtocol().encode(call.get_data(), data);
          call.perform();

  # ================================================================
  # Volume Down Commands
  # ================================================================
  - id: volume_down_port1
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port1).transmit();
          esphome::remote_base::SamsungData data;
          data.data = 0xE0E0D02F;
          esphome::remote_base::SamsungProtocol().encode(call.get_data(), data);
          call.perform();

  - id: volume_down_port2
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port2).transmit();
          esphome::remote_base::PanasonicData data;
          data.address = 0x4004;
          data.command = 0x01008485;
          esphome::remote_base::PanasonicProtocol().encode(call.get_data(), data);
          call.perform();

  - id: volume_down_port3
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port3).transmit();
          esphome::remote_base::LGData data;
          data.data = 0x20DFC03F;
          data.nbits = 32;
          esphome::remote_base::LGProtocol().encode(call.get_data(), data);
          call.perform();

  - id: volume_down_port4
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port4).transmit();
          esphome::remote_base::SonyData data;
          data.data = 0x0C90;
          data.nbits = 12;
          esphome::remote_base::SonyProtocol().encode(call.get_data(), data);
          call.perform();

  # ================================================================
  # Channel Up Commands
  # ================================================================
  - id: channel_up_port1
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port1).transmit();
          esphome::remote_base::SamsungData data;
          data.data = 0xE0E048B7;
          esphome::remote_base::SamsungProtocol().encode(call.get_data(), data);
          call.perform();

  - id: channel_up_port2
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port2).transmit();
          esphome::remote_base::PanasonicData data;
          data.address = 0x4004;
          data.command = 0x01002C2D;
          esphome::remote_base::PanasonicProtocol().encode(call.get_data(), data);
          call.perform();

  - id: channel_up_port3
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port3).transmit();
          esphome::remote_base::LGData data;
          data.data = 0x20DF00FF;
          data.nbits = 32;
          esphome::remote_base::LGProtocol().encode(call.get_data(), data);
          call.perform();

  - id: channel_up_port4
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port4).transmit();
          esphome::remote_base::SonyData data;
          data.data = 0x0090;
          data.nbits = 12;
          esphome::remote_base::SonyProtocol().encode(call.get_data(), data);
          call.perform();

  # ================================================================
  # Channel Down Commands
  # ================================================================
  - id: channel_down_port1
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port1).transmit();
          esphome::remote_base::SamsungData data;
          data.data = 0xE0E008F7;
          esphome::remote_base::SamsungProtocol().encode(call.get_data(), data);
          call.perform();

  - id: channel_down_port2
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port2).transmit();
          esphome::remote_base::PanasonicData data;
          data.address = 0x4004;
          data.command = 0x0100ACAD;
          esphome::remote_base::PanasonicProtocol().encode(call.get_data(), data);
          call.perform();

  - id: channel_down_port3
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port3).transmit();
          esphome::remote_base::LGData data;
          data.data = 0x20DF807F;
          data.nbits = 32;
          esphome::remote_base::LGProtocol().encode(call.get_data(), data);
          call.perform();

  - id: channel_down_port4
    then:
      - lambda: |-
          auto call = id(ir_transmitter_port4).transmit();
          esphome::remote_base::SonyData data;
          data.data = 0x0890;
          data.nbits = 12;
          esphome::remote_base::SonyProtocol().encode(call.get_data(), data);
          call.perform();
