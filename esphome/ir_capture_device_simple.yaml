# Simple IR Capture Device - MVP Version
# Purpose: Capture IR codes from any remote control
# User manually copies codes from logs and pastes into web interface

substitutions:
  device_name: ir-capture
  friendly_name: "IR Code Capture Device"

esphome:
  name: ${device_name}
  platform: ESP32
  board: esp32dev
  comment: "IR remote code capture device for TapCommand"

# WiFi configuration
# IMPORTANT: These will be read from database when using compile button
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot in case WiFi connection fails
  ap:
    ssid: "${device_name}-fallback"
    password: !secret fallback_password

# API configuration for remote access
# IMPORTANT: API key will be read from database
api:
  encryption:
    key: !secret api_key

# Enable OTA updates
ota:
  password: !secret ota_password

# Enable logging (this is where captured codes will appear)
logger:
  level: DEBUG
  logs:
    remote.raw: INFO  # Show raw IR codes
    remote_receiver: INFO  # Show decoded protocols

# Status LED (built-in LED on GPIO2 for most ESP32 boards)
status_led:
  pin: GPIO2

# Web server for easy access (optional but helpful)
web_server:
  port: 80

# ==================== IR RECEIVER ====================
# This captures IR codes from remote controls

remote_receiver:
  pin: GPIO14  # Connect IR receiver data pin to GPIO14
  # Dump all received codes to logs
  dump: all

  # ESP32-specific settings for best performance
  rmt_channel: 2

  # Filter out signal glitches
  filter: 50us

  # Signal must be stable for 10ms to be considered complete
  idle: 10ms

  # Tolerance for signal timing variations (10%)
  tolerance: 25%

# ==================== IR TRANSMITTER (for testing) ====================
# Optional: Allows testing captured codes immediately

remote_transmitter:
  pin: GPIO12  # Connect IR LED to GPIO12 (through transistor circuit)
  carrier_duty_percent: 50%  # 50% duty cycle for IR

# ==================== HELPER SENSORS ====================
# These provide useful information in the web interface

sensor:
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 60s

  - platform: uptime
    name: "${friendly_name} Uptime"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
    ssid:
      name: "${friendly_name} Connected SSID"

# ==================== HOW TO USE ====================
#
# 1. Flash this YAML to an ESP32 device
# 2. Connect IR receiver to GPIO14
# 3. Power on the device
# 4. View logs:
#    - Via web browser: http://ir-capture.local
#    - Via ESPHome: esphome logs ir_capture_device_simple.yaml
# 5. Press a button on your remote control
# 6. Look for lines like:
#    [remote.raw] Received Raw: [4500, 4500, 560, 1690, ...]
#    OR
#    [remote_receiver] Received NEC: address=0x04, command=0x08
# 7. Copy the code data and paste into TapCommand web interface
#
# ==================== EXAMPLE LOG OUTPUT ====================
#
# When you press Power button on Samsung remote:
# [14:23:45][I][remote.samsung] Received Samsung: data=0xE0E040BF
#
# When you press Volume Up on LG remote:
# [14:23:50][I][remote.lg] Received LG: data=0x20DF40BF, nbits=32
#
# When you press button on unknown remote:
# [14:23:55][I][remote.raw] Received Raw:
#   [4500, 4500, 560, 1690, 560, 560, 560, 1690, 560, 560, ...]
#
# ==================== WIRING ====================
#
# IR Receiver Module (e.g., TSOP38238):
#   - VCC → 3.3V
#   - GND → GND
#   - OUT → GPIO14
#
# IR LED Transmitter (optional, for testing):
#   - IR LED Anode → NPN Transistor Collector
#   - IR LED Cathode → GND (through 100Ω resistor)
#   - Transistor Base → GPIO12 (through 1kΩ resistor)
#   - Transistor Emitter → GND
#
