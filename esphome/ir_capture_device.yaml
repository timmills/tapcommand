substitutions:
  device_name: ir-capture
  friendly_name: IR Capture Device

esphome:
  name: ${device_name}

esp32:
  board: esp32dev
  variant: ESP32
  framework:
    type: arduino

# Enable mDNS for easy discovery
mdns:
  disabled: false

# WiFi configuration
wifi:
  networks:
    - ssid: "TV"
      password: "rdL1R7iDpXDx4O"
      hidden: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "IR-Capture Fallback"
    password: "qTBXKBSlXBtJYlfN"

captive_portal:

# Enable logging
logger:
  level: DEBUG
  baud_rate: 115200

# Enable Home Assistant API
api:
  encryption:
    key: "uuPgF8JOAV/ZhFbDV4iS4Kwr1MV5H97p6Nk+HnpE1+g="

# Enable OTA updates
ota:
  - platform: esphome
    password: "qTBXKBSlXBtJYlfN"

# Web server for easy access
web_server:
  port: 80

# IR Receiver Configuration
remote_receiver:
  - pin:
      number: GPIO4  # D4/IO4 pin on ESP32
      inverted: false  # Try non-inverted
      mode:
        input: true
        pullup: false  # VS1838B has internal pull-up
    dump: all    # Dump all received IR codes to logs
    filter: 50us   # Lower filter for better sensitivity
    idle: 10ms     # Standard idle time
    tolerance: 25% # Standard tolerance
    on_raw:
      - lambda: |-
          // Log ALL signals for debugging, even short ones
          ESP_LOGD("ir_capture", "Received IR signal: %d values", x.size());

          // Only process signals with reasonable length (filter out noise)
          if (x.size() < 10) {
            ESP_LOGD("ir_capture", "Ignoring short noise burst: %d values", x.size());
            return;
          }

          ESP_LOGI("ir_capture", "VALID IR CODE CAPTURED: %d pulses", x.size());

          // Store the raw IR code as JSON string
          std::string raw_data = "[";
          for (size_t i = 0; i < x.size(); i++) {
            if (i > 0) raw_data += ", ";
            raw_data += std::to_string(x[i]);
          }
          raw_data += "]";
          id(last_ir_code).publish_state(raw_data);

          ESP_LOGI("ir_capture", "Code published to sensor");

# IR Transmitter Configuration (for testing captured codes)
remote_transmitter:
  pin: GPIO12  # IR transmitter data pin (adjust based on your hardware)
  carrier_duty_percent: 50%

# Status LED
status_led:
  pin: GPIO2  # Built-in LED on most ESP32 boards

# Text sensor to show device status
text_sensor:
  - platform: version
    name: "${friendly_name} ESPHome Version"

  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
    ssid:
      name: "${friendly_name} SSID"
    mac_address:
      name: "${friendly_name} MAC Address"

  # Template sensor to store last captured IR code
  - platform: template
    name: "${friendly_name} Last IR Code"
    id: last_ir_code
    icon: "mdi:remote"

# Binary sensor for connection status
binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

# Sensor for WiFi signal strength
sensor:
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 60s

# Button to restart the device
button:
  - platform: restart
    name: "${friendly_name} Restart"
