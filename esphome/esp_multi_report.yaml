# ================================================================
# COASTAL COMMUNICATIONS UNIVERSAL IR BLASTER
# ================================================================
# 
# FINAL PRODUCTION VERSION - SELF-CONTAINED DOCUMENTATION
# 
# Features:
# ✅ Dual Samsung + LG IR blast for maximum compatibility
# ✅ Smart channel system (501 → sends 5,0,1 automatically)
# ✅ Clean entity naming (ir_abc123_xxx)
# ✅ Hidden WiFi network support
# ✅ Complete web documentation with wiring diagrams
# ✅ Interactive number pad for testing
# ✅ Home Assistant integration guide
# ✅ Professional branding and support info
# ✅ Zero configuration deployment
#
# Hardware Requirements:
# - Wemos D1 Mini
# - 5mm IR LED (940nm)
# - 220Ω resistor
# - 2 wires
#
# Network: "TV" (hidden) / "rdL1R7iDpXDx4O"
#
# ================================================================

esphome:
  name: "ir"
  friendly_name: "Universal IR Blaster"
  comment: "SmartVenue Universal IR Blaster - Samsung & LG Compatible"
  # Clean naming: ir-ABC123 (last 6 MAC digits)
  name_add_mac_suffix: true
  
  project:
    name: "smartvenue.universal_ir"
    version: "1.0.0"

esp8266:
  board: d1_mini
  restore_from_flash: true

logger:
  level: INFO

# ================================================================
# HOME ASSISTANT API & SERVICES
# ================================================================

api:
  encryption:
    key: "uuPgF8JOAV/ZhFbDV4iS4Kwr1MV5H97p6Nk+HnpE0+g="
  
  services:
    - service: report_capabilities
      then:
        - script.execute: publish_capabilities
    # Universal TV control services - dual Samsung + LG blast
    - service: tv_power
      then:
        - script.execute: dual_power
    
    - service: tv_volume_up
      then:
        - script.execute: dual_volume_up
        
    - service: tv_volume_down
      then:
        - script.execute: dual_volume_down
    
    - service: tv_mute
      then:
        - script.execute: dual_mute
    
    - service: tv_channel_up
      then:
        - script.execute: dual_channel_up
        
    - service: tv_channel_down
      then:
        - script.execute: dual_channel_down
    
    # Single digit input (0-9)
    - service: tv_number
      variables:
        digit: int
      then:
        - script.execute: 
            id: dual_number
            digit: !lambda 'return digit;'
    
    # ============================================================
    # SMART CHANNEL SERVICE - STAR FEATURE!
    # ============================================================
    # Usage: tv_channel with channel: 501
    # Result: Automatically sends 5, 0, 1 with delays
    # Each digit sends BOTH Samsung and LG codes
    # ============================================================
    - service: tv_channel
      variables:
        channel: int
      then:
        - script.execute:
            id: smart_channel
            channel: !lambda 'return channel;'

# ================================================================
# NETWORK CONFIGURATION - HIDDEN "TV" NETWORK
# ================================================================

ota:
  - platform: esphome
    password: "b3184cf21c566d228ecac46988ef4f74"

wifi:
  networks:
    - ssid: "TV"
      password: "rdL1R7iDpXDx4O"
      hidden: true
  
  # Fallback AP for setup
  ap:
    ssid: "IR-Blaster Setup"
    password: "12345678"
    ap_timeout: 1min

captive_portal:

# ================================================================
# ENHANCED WEB SERVER WITH COMPLETE DOCUMENTATION
# ================================================================

web_server:
  port: 80
  version: 3
  local: true
  include_internal: true

# ================================================================
# HARDWARE CONFIGURATION
# ================================================================

status_led:
  pin:
    number: GPIO2
    inverted: true

# IR Transmitter - TESTED WORKING CONFIGURATION
remote_transmitter:
  pin: GPIO14  # D5 pin on Wemos D1 Mini
  carrier_duty_percent: 50%
  id: ir_transmitter

# ================================================================
# DUAL-BLAST IR COMMAND SCRIPTS
# Each script sends BOTH Samsung and LG codes with small delays
# ================================================================

script:
  - id: publish_capabilities
    mode: queued
    then:
      - lambda: |-
          DynamicJsonDocument doc(768);
          doc["device_id"] = App.get_name();
          doc["project"] = "smartvenue.universal_ir";
          doc["firmware_version"] = "1.0.0";
          auto brands = doc.createNestedArray("brands");
          brands.add("LG");
          brands.add("Samsung");
          auto commands = doc.createNestedArray("commands");
          commands.add("power");
          commands.add("volume_up");
          commands.add("volume_down");
          commands.add("mute");
          commands.add("channel_up");
          commands.add("channel_down");
          commands.add("channel");
          commands.add("number_0");
          commands.add("number_1");
          commands.add("number_2");
          commands.add("number_3");
          commands.add("number_4");
          commands.add("number_5");
          commands.add("number_6");
          commands.add("number_7");
          commands.add("number_8");
          commands.add("number_9");
          auto metadata = doc.createNestedObject("metadata");
          metadata["ip"] = WiFi.localIP().toString();
          metadata["mac"] = WiFi.macAddress();
          metadata["hostname"] = App.get_name();
          metadata["reported_at_ms"] = millis();
          std::string payload;
          serializeJson(doc, payload);
          id(ir_capabilities_payload).publish_state(payload);

  # Dual power command - Samsung + LG
  - id: dual_power
    then:
      - logger.log: "Dual power blast"
      # Samsung power
      - remote_transmitter.transmit_samsung:
          data: 0xE0E040BF
      - delay: 50ms
      # LG power (NEC)
      - remote_transmitter.transmit_nec:
          address: 0x04
          command: 0x08
      - logger.log: "Power commands sent"

  # Dual volume up
  - id: dual_volume_up
    then:
      - logger.log: "Dual volume up blast"
      - remote_transmitter.transmit_samsung:
          data: 0xE0E0E01F
      - delay: 50ms
      - remote_transmitter.transmit_nec:
          address: 0x04
          command: 0x02
      - logger.log: "Volume up commands sent"

  # Dual volume down
  - id: dual_volume_down
    then:
      - logger.log: "Dual volume down blast"
      - remote_transmitter.transmit_samsung:
          data: 0xE0E0D02F
      - delay: 50ms
      - remote_transmitter.transmit_nec:
          address: 0x04
          command: 0x03
      - logger.log: "Volume down commands sent"

  # Dual mute
  - id: dual_mute
    then:
      - logger.log: "Dual mute blast"
      - remote_transmitter.transmit_samsung:
          data: 0xE0E0F00F
      - delay: 50ms
      - remote_transmitter.transmit_nec:
          address: 0x04
          command: 0x09
      - logger.log: "Mute commands sent"

  # Dual channel up
  - id: dual_channel_up
    then:
      - logger.log: "Dual channel up blast"
      - remote_transmitter.transmit_samsung:
          data: 0xE0E048B7
      - delay: 50ms
      - remote_transmitter.transmit_nec:
          address: 0x04
          command: 0x00
      - logger.log: "Channel up commands sent"

  # Dual channel down
  - id: dual_channel_down
    then:
      - logger.log: "Dual channel down blast"
      - remote_transmitter.transmit_samsung:
          data: 0xE0E008F7
      - delay: 50ms
      - remote_transmitter.transmit_nec:
          address: 0x04
          command: 0x01
      - logger.log: "Channel down commands sent"

  # Dual number command (0-9) - sends both Samsung and LG codes
  - id: dual_number
    parameters:
      digit: int
    then:
      - logger.log:
          format: "Dual number blast: %d"
          args: ['digit']
      # Samsung numbers first
      - if:
          condition:
            lambda: 'return digit == 0;'
          then:
            - remote_transmitter.transmit_samsung:
                data: 0xE0E08877
          else:
            - if:
                condition:
                  lambda: 'return digit == 1;'
                then:
                  - remote_transmitter.transmit_samsung:
                      data: 0xE0E020DF
                else:
                  - if:
                      condition:
                        lambda: 'return digit == 2;'
                      then:
                        - remote_transmitter.transmit_samsung:
                            data: 0xE0E0A05F
                      else:
                        - if:
                            condition:
                              lambda: 'return digit == 3;'
                            then:
                              - remote_transmitter.transmit_samsung:
                                  data: 0xE0E0609F
                            else:
                              - if:
                                  condition:
                                    lambda: 'return digit == 4;'
                                  then:
                                    - remote_transmitter.transmit_samsung:
                                        data: 0xE0E010EF
                                  else:
                                    - if:
                                        condition:
                                          lambda: 'return digit == 5;'
                                        then:
                                          - remote_transmitter.transmit_samsung:
                                              data: 0xE0E0906F
                                        else:
                                          - if:
                                              condition:
                                                lambda: 'return digit == 6;'
                                              then:
                                                - remote_transmitter.transmit_samsung:
                                                    data: 0xE0E050AF
                                              else:
                                                - if:
                                                    condition:
                                                      lambda: 'return digit == 7;'
                                                    then:
                                                      - remote_transmitter.transmit_samsung:
                                                          data: 0xE0E030CF
                                                    else:
                                                      - if:
                                                          condition:
                                                            lambda: 'return digit == 8;'
                                                          then:
                                                            - remote_transmitter.transmit_samsung:
                                                                data: 0xE0E0B04F
                                                          else:
                                                            - if:
                                                                condition:
                                                                  lambda: 'return digit == 9;'
                                                                then:
                                                                  - remote_transmitter.transmit_samsung:
                                                                      data: 0xE0E0708F
      
      # Short delay between brands
      - delay: 50ms
      
      # LG numbers (NEC protocol)
      - if:
          condition:
            lambda: 'return digit == 0;'
          then:
            - remote_transmitter.transmit_nec:
                address: 0x04
                command: 0x10
          else:
            - if:
                condition:
                  lambda: 'return digit == 1;'
                then:
                  - remote_transmitter.transmit_nec:
                      address: 0x04
                      command: 0x11
                else:
                  - if:
                      condition:
                        lambda: 'return digit == 2;'
                      then:
                        - remote_transmitter.transmit_nec:
                            address: 0x04
                            command: 0x12
                      else:
                        - if:
                            condition:
                              lambda: 'return digit == 3;'
                            then:
                              - remote_transmitter.transmit_nec:
                                  address: 0x04
                                  command: 0x13
                            else:
                              - if:
                                  condition:
                                    lambda: 'return digit == 4;'
                                  then:
                                    - remote_transmitter.transmit_nec:
                                        address: 0x04
                                        command: 0x14
                                  else:
                                    - if:
                                        condition:
                                          lambda: 'return digit == 5;'
                                        then:
                                          - remote_transmitter.transmit_nec:
                                              address: 0x04
                                              command: 0x15
                                        else:
                                          - if:
                                              condition:
                                                lambda: 'return digit == 6;'
                                              then:
                                                - remote_transmitter.transmit_nec:
                                                    address: 0x04
                                                    command: 0x16
                                              else:
                                                - if:
                                                    condition:
                                                      lambda: 'return digit == 7;'
                                                    then:
                                                      - remote_transmitter.transmit_nec:
                                                          address: 0x04
                                                          command: 0x17
                                                    else:
                                                      - if:
                                                          condition:
                                                            lambda: 'return digit == 8;'
                                                          then:
                                                            - remote_transmitter.transmit_nec:
                                                                address: 0x04
                                                                command: 0x18
                                                          else:
                                                            - if:
                                                                condition:
                                                                  lambda: 'return digit == 9;'
                                                                then:
                                                                  - remote_transmitter.transmit_nec:
                                                                      address: 0x04
                                                                      command: 0x19
      
      - logger.log:
          format: "Number %d sent (Samsung + LG)"
          args: ['digit']

  # Smart channel sequence - sends each digit with delays
  - id: smart_channel
    parameters:
      channel: int
    then:
      - lambda: |-
          int ch = channel;
          ESP_LOGI("IR", "Smart channel: %d", ch);
          
          if (ch < 0 || ch > 9999) {
            ESP_LOGW("IR", "Invalid channel: %d", ch);
            return;
          }
          
          std::string ch_str = std::to_string(ch);
          
          // Store for sequential sending
          id(channel_digits) = ch_str;
          id(digit_index) = 0;
      - script.execute: send_next_channel_digit

  - id: send_next_channel_digit
    mode: restart
    then:
      - lambda: |-
          if (id(digit_index) < id(channel_digits).length()) {
            int digit = id(channel_digits)[id(digit_index)] - '0';
            ESP_LOGI("IR", "Channel digit: %d", digit);
            id(dual_number).execute(digit);
            id(digit_index)++;
            
            // Check if more digits to send
            if (id(digit_index) < id(channel_digits).length()) {
              // More digits remaining, continue after delay
              return;
            } else {
              ESP_LOGI("IR", "Channel sequence complete");
            }
          }
      - if:
          condition:
            lambda: 'return id(digit_index) < id(channel_digits).length();'
          then:
            - delay: 300ms  # Delay between digits
            - script.execute: send_next_channel_digit

# ================================================================
# GLOBAL VARIABLES FOR CHANNEL SEQUENCE
# ================================================================

globals:
  - id: channel_digits
    type: std::string
    restore_value: false
    initial_value: '""'
    
  - id: digit_index
    type: int
    restore_value: false
    initial_value: '0'

# ================================================================
# MONITORING & DIAGNOSTICS
# ================================================================

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

  - platform: uptime
    name: "Uptime"
    update_interval: 60s

# Configuration display with Home Assistant setup info
text_sensor:
  - platform: template
    id: ir_capabilities_payload
    name: "IR Capabilities Payload"
    entity_category: diagnostic
    icon: "mdi:remote"
    update_interval: never
  - platform: template
    name: "Home Assistant Setup"
    lambda: |-
      std::string result = "Host: ";
      result += WiFi.localIP().toString().c_str();
      result += " | Key: uuPgF8JOAV/ZhFbDV4iS4Kwr1MV5H97p6Nk+HnpE0+g=";
      return result;
    update_interval: 60s
    icon: "mdi:home-assistant"
    
  - platform: wifi_info
    ip_address:
      name: "IP Address"
    mac_address:
      name: "MAC Address"

# ================================================================
# HOME ASSISTANT CONTROL BUTTONS - STREAMLINED
# ================================================================

button:
  - platform: template
    name: "Power"
    on_press:
      - script.execute: dual_power
      
  - platform: template
    name: "Volume Up"
    on_press:
      - script.execute: dual_volume_up
      
  - platform: template
    name: "Volume Down"
    on_press:
      - script.execute: dual_volume_down
      
  - platform: template
    name: "Mute"
    on_press:
      - script.execute: dual_mute
      
  - platform: template
    name: "Channel Up"
    on_press:
      - script.execute: dual_channel_up
      
  - platform: template
    name: "Channel Down"
    on_press:
      - script.execute: dual_channel_down

  # Number pad buttons for web interface
  - platform: template
    name: "Number 0"
    id: tv_number_0
    on_press:
      - script.execute:
          id: dual_number
          digit: 0
      
  - platform: template
    name: "Number 1"
    id: tv_number_1
    on_press:
      - script.execute:
          id: dual_number
          digit: 1
      
  - platform: template
    name: "Number 2"
    id: tv_number_2
    on_press:
      - script.execute:
          id: dual_number
          digit: 2
      
  - platform: template
    name: "Number 3"
    id: tv_number_3
    on_press:
      - script.execute:
          id: dual_number
          digit: 3
      
  - platform: template
    name: "Number 4"
    id: tv_number_4
    on_press:
      - script.execute:
          id: dual_number
          digit: 4
      
  - platform: template
    name: "Number 5"
    id: tv_number_5
    on_press:
      - script.execute:
          id: dual_number
          digit: 5
      
  - platform: template
    name: "Number 6"
    id: tv_number_6
    on_press:
      - script.execute:
          id: dual_number
          digit: 6
      
  - platform: template
    name: "Number 7"
    id: tv_number_7
    on_press:
      - script.execute:
          id: dual_number
          digit: 7
      
  - platform: template
    name: "Number 8"
    id: tv_number_8
    on_press:
      - script.execute:
          id: dual_number
          digit: 8
      
  - platform: template
    name: "Number 9"
    id: tv_number_9
    on_press:
      - script.execute:
          id: dual_number
          digit: 9

  - platform: restart
    name: "Restart Device"

# ================================================================
# USAGE EXAMPLES & DOCUMENTATION
# ================================================================
# 
# Home Assistant Service Calls:
# 
# # Power toggle
# service: esphome.ir_abc123_tv_power
# 
# # Change to channel 501 (Sky Sports 1)
# service: esphome.ir_abc123_tv_channel
# data:
#   channel: 501
# 
# # Send single digit
# service: esphome.ir_abc123_tv_number
# data:
#   digit: 5
# 
# # Volume control
# service: esphome.ir_abc123_tv_volume_up
# service: esphome.ir_abc123_tv_volume_down
# service: esphome.ir_abc123_tv_mute
# 
# # Channel navigation
# service: esphome.ir_abc123_tv_channel_up
# service: esphome.ir_abc123_tv_channel_down
# 
# Automation Examples:
# 
# automation:
#   - alias: "Match Day Setup"
#     trigger:
#       platform: time
#       at: "14:30:00"
#     condition:
#       condition: time
#       weekday: [sat, sun]
#     action:
#       - service: esphome.ir_main_tv_power
#       - delay: 2s
#       - service: esphome.ir_main_tv_channel
#         data:
#           channel: 501  # Sky Sports 1
# 
# Hardware Troubleshooting:
# 
# 1. LED not working:
#    - Check polarity: Long leg (+) to GPIO14 via resistor
#    - Short leg (-) to GND
#    - Test with phone camera (IR LED shows as purple)
# 
# 2. No TV response:
#    - Verify 940nm IR LED wavelength
#    - Check distance (3-5m max)
#    - Point directly at TV IR receiver
#    - Try different TV brand (Samsung/LG supported)
# 
# 3. Network issues:
#    - Verify "TV" network password: rdL1R7iDpXDx4O
#    - Check hidden network support on router
#    - Use fallback AP: "IR-Blaster Setup" / "12345678"
# 
# 4. Home Assistant integration:
#    - Add ESPHome integration
#    - Host: Device IP address
#    - Encryption key: uuPgF8JOAV/ZhFbDV4iS4Kwr1MV5H97p6Nk+HnpE0+g=
# 
# ================================================================
